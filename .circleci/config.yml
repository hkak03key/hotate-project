version: 2.1
executors:
  terraform:
    docker:
      - image: hashicorp/terraform:0.12.20
    working_directory: ~/

  gcloud:
    docker:
      - image: google/cloud-sdk
    working_directory: ~/

#----------------------------------------
commands:
  create_gcp_credentials_file:
    parameters:
      cred_filepath:
        type: string
      cred_json:
        type: string
    steps:
      - run:
          name: create gcp credentials
          command: |
            echo "<< parameters.cred_json >>" >> << parameters.cred_filepath >>

  init_gcloud:
    parameters:
      project_id:
        type: string
      cred_json:
        type: string
    steps:
      - run:
          name: init gcloud
          command: |
            echo "<< parameters.cred_json >>" | gcloud auth activate-service-account --key-file=-
            gcloud --quiet config set project << parameters.project_id >>

#----------------------------------------
jobs:
  tf_check_format:
    executor: terraform
    parameters:
      exec_directory:
        type: string
        default: terraform
    steps:
      - checkout:
          path: project
      - run: terraform version
      - run:
          name: terraform format check
          command: |
            cd project/<< parameters.exec_directory >>
            terraform fmt -diff -check -recursive

  tf_plan:
    executor: terraform
    parameters:
      cred_json:
        type: string
      exec_directory:
        type: string
    steps:
      - checkout:
          path: project
      - create_gcp_credentials_file:
          cred_json: << parameters.cred_json >>
          cred_filepath: project/<< parameters.exec_directory >>/gcp_service_key.json
      - run: terraform version
      - run:
          name: terraform init
          command: |
            cd project/<< parameters.exec_directory >>
            terraform init
      - run:
          name: terraform validate
          command: |
            cd project/<< parameters.exec_directory >>
            terraform validate
      - run:
          name: terraform plan
          command: |
            cd project/<< parameters.exec_directory >>
            TF_STATUS=0
            terraform plan -detailed-exitcode || TF_STATUS=$?
            if [ $TF_STATUS -ne 2 ]; then
              exit $TF_STATUS
            fi
      - persist_to_workspace:
          root: .
          paths:
            - project/<< parameters.exec_directory >>

  tf_deploy:
    executor: terraform
    parameters:
      exec_directory:
        type: string
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform apply
          command: |
            cd project/<< parameters.exec_directory >>
            ls -la
            terraform apply -auto-approve

  gcf_deploy:
    executor: gcloud
    parameters:
      cred_json:
        type: string
      project_id:
        type: string
    steps:
      - checkout:
          path: project
      - init_gcloud:
          cred_json: << parameters.cred_json >>
          project_id: << parameters.project_id >>
      - run:
          name: deploy
          command: |
            cd project
            pip3 install pyyaml docopt
            find google_cloud_functions/ -maxdepth 1 -mindepth 1 -type d | xargs -I {} basename {} | uniq \
                | xargs -I {} --no-run-if-empty bash -c 'echo "deploy {}..." && ./scripts/deploy_gcf.py -c google_cloud_functions/{}/config.yml -p google_cloud_functions/{}/policy.yml'
            git diff HEAD^ --name-only --relative=google_cloud_functions --diff-filter=D -M100 | sed -r 's#/.*##g'| uniq | sort \
                | join <(gcloud functions list | awk -F "  " '{print $1, "--region", $4}' | tail -1 | sort) - \
                | xargs -I {} --no-run-if-empty bash -c 'echo "delete {}..." && gcloud functions delete {}'

#----------------------------------------
workflows:
  deploy_workflow:
    jobs:
      - tf_check_format:
          exec_directory: terraform
      # ----------------------------------
      - tf_plan:
          name: tf_plan_prod
          cred_json: ${PROD_GCP_SERVICE_KEY}
          exec_directory: terraform/envs/prod
          requires:
            - tf_check_format
      - approval:
          name: approval_prod
          type: approval
          requires:
            - tf_plan_prod
          filters:
            branches:
              only:
                - master
      - tf_deploy:
          name: tf_deploy_prod
          exec_directory: terraform/envs/prod
          requires:
            - approval_prod
          filters:
            branches:
              only:
                - master
      - gcf_deploy:
          name: gcf_deploy_prod
          cred_json: ${PROD_GCP_SERVICE_KEY}
          project_id: hotate-project
          requires:
            - tf_deploy_prod

      # ----------------------------------
      - tf_plan:
          name: tf_plan_stg
          cred_json: ${STG_GCP_SERVICE_KEY}
          exec_directory: terraform/envs/stg
          requires:
            - tf_check_format
      - tf_deploy:
          name: tf_deploy_stg
          exec_directory: terraform/envs/stg
          requires:
            - tf_plan_stg
      - gcf_deploy:
          name: gcf_deploy_stg
          cred_json: ${STG_GCP_SERVICE_KEY}
          project_id: hotate-project-stg
          requires:
            - tf_deploy_stg

